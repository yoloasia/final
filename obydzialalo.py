#################################################################
                        #Preparing data
#################################################################

from pydataset import data
import numpy as np
import csv
import keras
import math
import pandas
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten, Embedding
from keras.optimizers import SGD

#using data function from pydataset module to get data under 'seals' variable
seals = data('seals')

#empty lists ready to get values
d_long = []
d_lat = []
longitude = []
latitude = []
time = []
group_l = []
#iterates through rows of seals dataset an appends deltas values to
#delta_long and delta_lat lists

for index, row in seals.iterrows():

    d_long.append(row["delta_long"])
    d_lat.append(row["delta_lat"])
    longitude.append(row["long"])
    latitude.append(row["lat"])

#calculating mean and standard deviation of deltas
mean_long = np.mean (d_long)
mean_lat = np.mean (d_lat)
standard_deviation_long = np.std (d_long)
standard_deviation_lat = np.std (d_lat)

#until there are not 10k records in a list a loop does its job (10k can be changed to any value)
id = 1

while len(d_long) < 19155:

#if length of current list is dividable by 200, script calculates new standard devation and mean
#depending on last 1155 records (first 200 is replaced by new 200 and so on)
    if len(d_long) % 200 == 0:
        mean_long = np.mean (d_long[ len(d_long) - 1155: ])
        mean_lat = np.mean (d_lat[ len(d_lat) - 1155: ])
        standard_deviation_long = np.std (d_long [ len(d_long) - 1155: ])
        standard_deviation_lat = np.std (d_lat [ len(d_lat) - 1155: ])

#choosing 0 or 1 randomly
    zero_one_lat = np.random.randint(low = 0, high = 2)

#creates random values from range of mean-sd*1.75 to mean+sd*1.75
    if (id <= 3000) or ((id > 9000) and (id <= 12000)):
        multiplier = 1
        group = 1
    elif (id <= 6000 and id > 3000) or (id > 12000 and id <= 15000):
        multiplier = 1.5
        group = 2
    elif (id <= 9000 and id > 6000) or (id > 15000):
        multiplier = 1.75
        group = 3

    create_dlong = np.random.uniform (low = (mean_long - multiplier*standard_deviation_long),
    high = (mean_long + multiplier*standard_deviation_long))
    create_dlat = np.random.uniform (low = (mean_lat - multiplier*standard_deviation_lat),
    high = (mean_lat + multiplier*standard_deviation_lat))

#now if zero_one_lat which was defined earlier is 0, than the delta is multiplied by -1
#if equals 1, than it stays as before
    if zero_one_lat == 0:
        create_dlat = create_dlat * -1
    else:
        continue

#adding delta longitude and latitude to lists
    d_long.append(create_dlong)
    d_lat.append(create_dlat)

#creating longitude and latitude
    create_long = longitude[-1] + create_dlong
    create_lat = latitude[-1] + create_dlat

#if there are unpossible results like 190 longitude, then it means, that seals have
#crossed the 180 longitude degree and are at -180
    if create_long > 180:
        create_long = create_long - 360
    elif create_long < -180:
        create_long = create_long + 360

#unfortunately, we can not do the same with latitude, because crossing 90 degrees south,
#does not make them 90 degrees north, so if result is over 90 degrees latitude,
#it makes last record - current delta latitude (changes from positive to negative)
    if create_lat > 90 or create_lat < -90:
        create_lat = latitude[-1] - create_dlat

#adds id, longitude and latitude to lists
    longitude.append(create_long)
    latitude.append(create_lat)
    group_l.append(group)

    id += 1 #increment id by 1

#calculating biggest delta in the set. depending on this, time between records will be added
max_delta = 0.7 * (max(d_long) + math.fabs(min(d_long))) + (max(d_lat) + math.fabs(min(d_lat)))
max_delta_1 = max_delta * 1/7
max_delta_2 = max_delta * 2/7
max_delta_3 = max_delta * 3/7
max_delta_4 = max_delta * 4/7
max_delta_5 = max_delta * 5/7
max_delta_6 = max_delta * 6/7

id = 0

#iterating through the records, and adding time to list, depending on delta
for coords in d_long:
    current_delta = math.fabs(d_long[id]) + math.fabs(d_lat[id])
    if current_delta < max_delta_1:
        time.append(1)
    elif (current_delta < max_delta_2) & (current_delta > max_delta_1):
        time.append(2)
    elif (current_delta < max_delta_3) & (current_delta > max_delta_2):
        time.append(3)
    elif (current_delta < max_delta_4) & (current_delta > max_delta_3):
        time.append(4)
    elif (current_delta < max_delta_5) & (current_delta > max_delta_4):
        time.append(5)
    elif (current_delta < max_delta_6) & (current_delta > max_delta_5):
        time.append(6)
    elif current_delta > max_delta_6:
        time.append(7)
    id += 1



#Old way of reading data, zip funcion was changing shape of array
#long_lat = list, zip(latitude, longitude, time, group_1)
#long_lat = np.array(long_lat)
#long_lat = long_lat [np.newaxis,:]

#cuting data to nice shape, easy to slice
longitude = longitude[:18000]
latitude = latitude[:18000]
time = time[:18000]
#because python had problem with defined group value I saved it from data and read as csv file
group = pandas.read_csv('group_p1.csv', delimiter=',', header = None)

#changing all variables into numpy array and connecting to one array that is easy to read for keras
longitude = np.array(longitude)
latitude = np.array(latitude)
time = np.array(time)
group = np.array(group)

print(longitude.shape, latitude.shape, time.shape, group.shape)
lat_long = np.column_stack((latitude, longitude, time, group))




################################################################
                        #First Prediction
#Prediction of next values based only on longitude and latitude
#################################################################

#reading only 2 first columns
#keras needs input and output shape to be the same, that's why we cut it in a half
x_train = lat_long[:9000, :2]
y_train = lat_long[9000:18000, :2]
x_test = lat_long[:9000, :2]
y_test = lat_long[9000:18000, :2]

#addind new axis to fit input shape (3 dimensions)
x_train = x_train[np.newaxis, :]
y_train = y_train[np.newaxis, :]
x_test = x_test[np.newaxis, :]
y_test = y_test[np.newaxis, :]

#checking shape of inputs
print (y_train.shape, y_test.shape, x_train.shape, x_test.shape)

#creating model and adding layers to it
model = Sequential()
model.add(Dense(units = 64, input_shape = (9000, 2)))
model.add(Dropout(0.5))
model.add(Dense(32, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(2, activation='softmax'))

sgd = SGD(lr=0.01, decay=1e-6, momentum=0.9, nesterov=True)
model.compile(loss='categorical_crossentropy',
              optimizer=sgd,
              metrics=['accuracy'])

model.fit(x_train, y_train,
          epochs=25,
          batch_size=25)
score = model.evaluate(x_test, y_test, batch_size=100)

model.summary()



################################################################
                        #Second Prediction
#Prediction of next values based on all variables
################################################################

#same situation as in first prediction, but working on all 4 columns
x_train = lat_long[:9000]
y_train = lat_long[9000:18000]
x_test = lat_long[:9000]
y_test = lat_long[9000:18000]

x_train = x_train[np.newaxis, :]
y_train = y_train[np.newaxis, :]
x_test = x_test[np.newaxis, :]
y_test = y_test[np.newaxis, :]

#checking shape of inputs
print (y_train.shape, y_test.shape, x_train.shape, x_test.shape)

#creating model and adding layers to it
model = Sequential()
model.add(Dense(units = 64, input_shape = (9000, 4)))
model.add(Dropout(0.5))
model.add(Dense(32, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(4, activation='softmax'))

sgd = SGD(lr=0.01, decay=1e-6, momentum=0.9, nesterov=True)
model.compile(loss='categorical_crossentropy',
              optimizer=sgd,
              metrics=['accuracy'])

model.fit(x_train, y_train,
          epochs=25,
          batch_size=25)
score = model.evaluate(x_test, y_test, batch_size=100)

model.summary()




################################################################
                        #Third Prediction
#Prediction of group 
################################################################



#Spliting data into train and test parts
#We want to use as our test data 10% of our data
#We generate 180 random values that will be later select as tet data
#random.sample return a k length list of unique elements chosen 
#from the population sequence

#random_list = random.sample(range(18000), 1800)

#saving choosen rows to test_data data frame
test_data = lat_long[[16912, 13335, 7337, 16141, 9468, 10398, 3727, 4869, 3777, 3458, 1610, 14851, 4473, 1641, 7003, 7665, 10143, 15422, 9798, 17710, 5336, 12806, 11202, 9216, 12038, 4848, 17716, 12659, 7490, 1087, 6450, 9895, 1160, 4133, 9886, 15547, 9301, 3673, 13484, 16027, 2717, 15369, 15193, 6257, 14487, 17178, 424, 3876, 1901, 10077, 1175, 1300, 17685, 8459, 5478, 15362, 16694, 3959, 1312, 9285, 15556, 7340, 9492, 13042, 11129, 4163, 2757, 11758, 12711, 15121, 5273, 7600, 889, 6234, 3739, 4093, 2480, 17257, 6021, 16588, 11678, 6883, 10025, 10168, 6740, 10872, 14743, 7006, 8768, 9887, 169, 13415, 14396, 12135, 11383, 3433, 16584, 8132, 4232, 8529, 11496, 2470, 6269, 16467, 16574, 9387, 2513, 13859, 5029, 12150, 14563, 10792, 1537, 7586, 17914, 684, 4241, 13639, 14812, 17016, 15162, 3060, 12311, 17323, 14478, 5758, 1070, 17024, 15862, 8905, 2474, 8034, 16829, 830, 9530, 7920, 11113, 16129, 16806, 17653, 4262, 15635, 6570, 6534, 8338, 10827, 6938, 1413, 14238, 11553, 11257, 4525, 312, 6901, 4445, 11175, 9670, 12503, 12781, 7480, 14800, 3267, 17149, 958, 14700, 13936, 9228, 11973, 14526, 8513, 14492, 15061, 13767, 7278, 8947, 5762, 2562, 5312, 11414, 72, 6493, 10508, 15701, 2279, 15721, 11550, 1957, 4758, 14821, 13037, 5424, 3058, 2179, 7008, 10289, 6574, 12195, 12255, 1842, 7885, 5601, 3157, 174, 16155, 3457, 1849, 2628, 4260, 15429, 6009, 9485, 16263, 5325, 8488, 7459, 15080, 14791, 10288, 16124, 13766, 8449, 16926, 11933, 14298, 15152, 11061, 7884, 239, 2200, 15973, 12248, 16262, 460, 1509, 13507, 192, 4891, 4935, 6746, 9298, 15482, 14123, 5576, 7800, 11837, 9662, 10761, 16418, 5867, 11348, 2447, 13223, 11525, 11095, 8900, 10989, 17749, 14611, 3649, 14364, 12105, 8689, 16187, 7865, 17271, 2934, 9265, 16086, 6508, 16313, 4785, 9506, 14333, 451, 15320, 7111, 2909, 14085, 16329, 16688, 15911, 17439, 17202, 2671, 9021, 1222, 1213, 8724, 12187, 5039, 1930, 17190, 6624, 1562, 14196, 11876, 11101, 17157, 11429, 4861, 11234, 4151, 14567, 9020, 12216, 694, 7220, 109, 7215, 16769, 11689, 2879, 17566, 1967, 12316, 13723, 10982, 3519, 431, 3444, 4563, 6836, 2441, 17848, 16858, 15014, 1978, 7706, 10471, 1863, 12373, 407, 8331, 12236, 13506, 17795, 10302, 5759, 13884, 15746, 9658, 17997, 5529, 12917, 12042, 16668, 14677, 8172, 13644, 4834, 8925, 5104, 11591, 17083, 6007, 14508, 15198, 14675, 12680, 16886, 4423, 12437, 8298, 8730, 14573, 6985, 6500, 13025, 14591, 13148, 1680, 8249, 5204, 13695, 8611, 3809, 137, 14239, 333, 14101, 9834, 2730, 1090, 1371, 2663, 16172, 203, 15374, 7768, 9672, 7118, 6390, 5827, 13360, 4365, 4331, 16663, 14354, 6906, 4795, 10432, 15648, 4472, 9981, 11386, 12562, 15971, 4468, 5173, 10357, 3397, 17549, 16677, 7230, 9932, 15007, 6972, 9809, 2625, 17113, 3310, 7065, 13406, 4738, 5882, 7454, 16671, 11670, 17054, 9600, 2551, 2107, 9962, 3190, 16692, 16600, 5196, 14874, 17955, 5358, 2438, 8061, 2566, 8748, 119, 16114, 9634, 13750, 14336, 16215, 11557, 16446, 922, 12551, 14797, 5965, 5455, 7511, 17633, 10519, 10988, 5533, 490, 2615, 17070, 14263, 5846, 951, 15427, 983, 1821, 4411, 11829, 254, 8837, 9696, 13787, 12655, 14424, 14368, 8309, 17569, 14250, 5621, 13202, 7755, 13790, 15342, 17462, 3859, 10643, 16490, 16235, 10176, 6729, 12753, 10438, 10560, 16171, 7481, 14932, 11194, 4200, 9961, 7813, 3133, 8142, 6335, 14147, 13392, 10610, 115, 7103, 2384, 15262, 8857, 8698, 15870, 7699, 7843, 6549, 13074, 5996, 12585, 2492, 8215, 680, 8444, 2571, 2539, 5481, 13517, 13693, 13166, 6414, 15719, 17860, 5959, 14656, 17061, 3964, 10568, 13889, 1387, 16838, 9622, 6548, 4949, 3748, 17454, 10611, 12622, 1567, 4454, 3981, 12932, 2767, 320, 2871, 8619, 14651, 15335, 7247, 9852, 17898, 11786, 8602, 14924, 10627, 14312, 4742, 10925, 8588, 4714, 3260, 15024, 17518, 4183, 13711, 11741, 2275, 147, 5611, 65, 3930, 3185, 14808, 8266, 14133, 2642, 16154, 188, 16327, 1370, 10807, 10348, 10071, 11060, 17835, 6196, 7645, 1897, 14707, 11733, 5369, 7409, 530, 103, 13014, 10244, 6851, 7816, 596, 10481, 13248, 2817, 12092, 16115, 15545, 17270, 5084, 11939, 13377, 6809, 5871, 1400, 2431, 2692, 5893, 5581, 3124, 13544, 2197, 651, 4859, 9306, 15420, 1458, 8858, 14693, 4805, 8754, 4452, 8425, 17949, 94, 15231, 3516, 17723, 13862, 9360, 11362, 15520, 8470, 12213, 5477, 9739, 7144, 97, 3807, 14789, 1734, 2429, 13519, 9124, 10731, 12662, 7310, 9930, 12323, 13640, 15486, 16823, 11239, 8696, 8781, 8827, 11223, 10551, 15348, 13838, 12351, 11326, 5021, 13421, 11378, 2537, 199, 7089, 14612, 5479, 17148, 17470, 4303, 11404, 722, 12292, 11062, 3867, 2084, 11699, 6302, 3333, 7012, 14203, 8983, 3819, 16855, 14477, 13127, 17849, 13328, 9631, 6846, 17250, 1606, 8908, 1162, 17554, 3126, 5013, 14035, 953, 2405, 10335, 15043, 6384, 17080, 16928, 12991, 12262, 6981, 3468, 17156, 9414, 2079, 1560, 9657, 15798, 6254, 16658, 3143, 17324, 10243, 10499, 4837, 11235, 12998, 13535, 11315, 6119, 8741, 17291, 12230, 526, 725, 17074, 4030, 242, 6891, 9991, 6358, 17655, 327, 14228, 5951, 5147, 13997, 9805, 4181, 12184, 10300, 4871, 12159, 788, 15254, 14071, 15998, 15450, 15435, 15122, 8903, 14118, 2843, 1189, 5769, 2231, 3881, 12953, 13492, 11822, 8293, 7271, 16735, 9064, 12648, 17864, 3103, 2459, 10326, 11501, 11001, 1403, 6771, 11789, 2899, 16148, 6926, 4137, 6463, 3374, 1852, 10507, 5503, 6360, 7993, 9070, 7587, 2890, 7117, 14824, 949, 17831, 7846, 4357, 3286, 13409, 4512, 3864, 4164, 10454, 504, 5638, 5843, 6957, 8279, 17311, 14294, 3548, 12619, 1991, 9688, 6488, 8199, 13333, 6404, 13636, 15306, 6012, 7864, 6523, 12909, 6542, 17325, 3480, 16537, 6217, 10256, 6343, 3490, 13956, 17921, 4757, 803, 6913, 3018, 11940, 5410, 874, 11583, 5515, 12128, 17336, 10995, 6458, 9874, 14237, 1644, 14895, 15877, 9238, 10980, 11263, 12899, 464, 6292, 4185, 4168, 2174, 16272, 14016, 17599, 2114, 5345, 5437, 12992, 6596, 12947, 1489, 4166, 17371, 15797, 4967, 8230, 7889, 11831, 2682, 17364, 1543, 4476, 3951, 14001, 10216, 859, 855, 8993, 3966, 2748, 3647, 13472, 9659, 15792, 14411, 1517, 7852, 4006, 16604, 9348, 14270, 7018, 5298, 3985, 4319, 13739, 12179, 5114, 9803, 4195, 1191, 16386, 12821, 1881, 14899, 13115, 6017, 7731, 2882, 9011, 17154, 630, 7135, 13968, 9248, 15079, 10795, 11436, 16994, 6407, 6932, 1404, 4737, 13303, 5129, 13685, 13158, 4722, 8475, 9324, 13352, 8678, 14375, 13526, 1997, 10468, 3207, 133, 5459, 11293, 11220, 9139, 12994, 13504, 9441, 2080, 7561, 11211, 12769, 15590, 1449, 1840, 12869, 17796, 15149, 4479, 5254, 16517, 7088, 4393, 15042, 2277, 10608, 6029, 6540, 385, 14692, 17089, 16958, 16717, 12271, 1219, 1980, 16675, 798, 8789, 14174, 9772, 10592, 214, 16363, 8986, 5396, 7116, 2083, 175, 11666, 12356, 9800, 8186, 4280, 12647, 4881, 16139, 6654, 8923, 11645, 10819, 13523, 6112, 10147, 7647, 1204, 10166, 12436, 9438, 6249, 5441, 353, 5213, 10705, 6344, 4527, 1359, 12508, 3204, 5326, 16709, 17869, 16457, 11855, 14785, 11965, 1791, 7717, 216, 4940, 1465, 7534, 8548, 8729, 12485, 7557, 10433, 15314, 16720, 16754, 1963, 9898, 3918, 16469, 10642, 5587, 16736, 16479, 12130, 13212, 8437, 14483, 17343, 14856, 10444, 8234, 7859, 4327, 9175, 6955, 10435, 7166, 1391, 8964, 14632, 7863, 16258, 10748, 6443, 12473, 3731, 9694, 4490, 16716, 6978, 2262, 1475, 6674, 12887, 12613, 3071, 15497, 16738, 5982, 2113, 3540, 17560, 9297, 11471, 1986, 7143, 10504, 16213, 15759, 15247, 3580, 10072, 15232, 16037, 13178, 15773, 16546, 336, 1064, 7224, 9161, 1258, 11068, 514, 4836, 16441, 5141, 15440, 2947, 8557, 3024, 2048, 16521, 2195, 8882, 1469, 17956, 17055, 9608, 3280, 10799, 17970, 2027, 9535, 10329, 5291, 14181, 4500, 9735, 1226, 14540, 14098, 12459, 125, 11274, 4193, 1524, 11955, 166, 6650, 17707, 8384, 5811, 5748, 10826, 3931, 15846, 15146, 4791, 4586, 9133, 3962, 6444, 3789, 4440, 16944, 10023, 11765, 3173, 15936, 16271, 2054, 1369, 3423, 790, 4684, 4045, 1533, 347, 1758, 10783, 9974, 5839, 13459, 15471, 12829, 3944, 4964, 8367, 17398, 16175, 7952, 4420, 1446, 10340, 10794, 15377, 17527, 16001, 4372, 5106, 10558, 3371, 262, 9235, 16354, 4144, 10040, 12266, 14956, 14653, 1246, 14113, 14603, 13922, 4916, 15634, 5255, 9513, 5659, 2614, 13890, 16257, 14566, 15744, 2373, 7238, 15356, 11038, 4582, 4535, 100, 9279, 6856, 2837, 14138, 10893, 17771, 17657, 5484, 14523, 1830, 2593, 10463, 12193, 1732, 10645, 6383, 1867, 5975, 11701, 1504, 2649, 210, 1599, 6600, 1570, 14380, 13036, 11772, 15683, 14439, 14233, 2870, 1373, 12608, 17485, 5527, 13979, 14598, 15531, 12403, 14216, 5904, 9716, 15432, 537, 2503, 1254, 16552, 4022, 8682, 14752, 2085, 11932, 486, 11972, 3606, 7081, 16984, 15039, 10778, 7677, 9945, 12783, 2300, 7293, 7014, 690, 11982, 19, 17772, 10374, 9322, 11321, 2376, 7252, 4761, 12264, 13671, 6411, 17767, 4797, 4996, 9545, 10308, 14922, 5389, 11800, 612, 11686, 14009, 2049, 16090, 14715, 1608, 8448, 13453, 3842, 12569, 2701, 7485, 11627, 9087, 5592, 12862, 7643, 10652, 5089, 2938, 9240, 11537, 165, 16375, 13470, 13692, 9040, 2655, 1383, 8194, 4317, 12496, 2627, 11303, 13835, 9629, 3482, 8702, 16472, 7102, 14002, 9763, 10379, 481, 2600, 6061, 15509, 2126, 3208, 11114, 5045, 17143, 2147, 4397, 15727, 14285, 8951, 15249, 16308, 8867, 13870, 7943, 2788, 829, 13134, 11909, 15745, 14061, 17459, 3905, 12226, 11921, 2925, 7191, 17159, 10441, 3841, 6826, 410, 15957, 244, 7990, 10736, 16390, 3175, 6873, 10112, 17449, 6113, 15084, 13788, 5054, 961, 8684, 11886, 7072, 9987, 4994, 17035, 1740, 12665, 2320, 7730, 15041, 1962, 3281, 3368, 11339, 2778, 12178, 5418, 14017, 3924, 8742, 10976, 10521, 9779, 15980, 17049, 12487, 7037, 11353, 11233, 5101, 15139, 7029, 11135, 283, 1905, 13520, 17821, 6897, 15740, 9163, 406, 13994, 16269, 3474, 14341, 9291, 17584, 4353, 10602, 13980, 13916, 6236, 15163, 17253, 12987, 5227, 982, 6036, 8278, 659, 6120, 533, 12990, 294, 10896, 10865, 11936, 7063, 4979, 16616, 4217, 7005, 7625, 9864, 13909, 11309, 9399, 6812, 11319, 1549, 1029, 12902, 13917, 14504, 14362, 1282, 3588, 14588, 13831, 6361, 11616, 10938, 9055, 14635, 12958, 16178, 8247, 2036, 1397, 8757, 14503, 8373, 16054, 17718, 11530, 1568, 10050, 9225, 15760, 8970, 11960, 13327, 2258, 6201, 13990, 170, 1540, 9427, 13891, 11017, 12721, 10165, 11856, 5858, 2602, 6886, 13291, 10753, 11607, 10253, 8242, 629, 15924, 2000, 5816, 12335, 12364, 13215, 8205, 8214, 17836, 16018, 13204, 14159, 10316, 15953, 8569, 2923, 13002, 3566, 1679, 2921, 16667, 16676, 7807, 4279, 10803, 461, 14699, 17626, 9851, 4281, 2712, 9514, 2760, 16466, 17806, 587, 2904, 427, 1441, 8414, 6834, 10097, 1973, 15884, 2842, 9593, 10654, 11474, 1499, 12617, 7101, 8853, 12984, 15275, 3435, 12202, 16283, 3866, 4034, 7735, 10019, 5869, 17467, 7140, 4818, 9305, 12538, 8635, 3643, 7439, 3242, 15932, 11369, 17238, 4152, 14092, 12229, 17625, 15134, 10299, 4728, 17466, 13920, 9888, 4107, 3626, 11445, 10198, 16940, 3637, 10135, 4295, 4659, 12394, 5429, 3503, 6634, 17153, 13703, 6509, 13254, 67, 8632, 1569, 14328, 13488, 17119, 16724, 13155, 6368, 17499, 12885, 10252, 17493, 10912, 1948, 13047, 15150, 1595, 9801, 2471, 10502, 1456, 1908, 15908, 5508, 10418, 17681, 2861, 7904, 5370, 11296, 9712, 15375, 6247, 3245, 9665, 13044, 8198, 5109, 4763, 17669, 12866, 2070, 7890, 1071, 1751, 11209, 8597, 4341, 14600, 4942, 3292, 4540, 6535, 7936, 3210, 2347, 2893, 10625, 17889, 252, 10916, 5544, 4451, 6995, 13556, 16946, 6563, 6433, 6470, 7789, 3805, 8461, 2040, 15196, 1152, 6619, 16274, 14485, 1299, 11676, 7372, 15561, 4399, 12350, 3357, 8471, 8267, 3665, 11882, 10707, 5641, 4618, 512, 717, 14593, 11431, 742, 8457, 14254, 17200, 11183, 17223, 3181, 4165, 12542, 7404, 13873, 8163, 14116, 2256, 9142, 1069, 2363, 15717, 658, 13814, 6693, 4299, 3365, 95, 5309, 13531]]
#deleting test data from main data frame and saving it as train_data
train_data = np.delete(lat_long,[16912, 13335, 7337, 16141, 9468, 10398, 3727, 4869, 3777, 3458, 1610, 14851, 4473, 1641, 7003, 7665, 10143, 15422, 9798, 17710, 5336, 12806, 11202, 9216, 12038, 4848, 17716, 12659, 7490, 1087, 6450, 9895, 1160, 4133, 9886, 15547, 9301, 3673, 13484, 16027, 2717, 15369, 15193, 6257, 14487, 17178, 424, 3876, 1901, 10077, 1175, 1300, 17685, 8459, 5478, 15362, 16694, 3959, 1312, 9285, 15556, 7340, 9492, 13042, 11129, 4163, 2757, 11758, 12711, 15121, 5273, 7600, 889, 6234, 3739, 4093, 2480, 17257, 6021, 16588, 11678, 6883, 10025, 10168, 6740, 10872, 14743, 7006, 8768, 9887, 169, 13415, 14396, 12135, 11383, 3433, 16584, 8132, 4232, 8529, 11496, 2470, 6269, 16467, 16574, 9387, 2513, 13859, 5029, 12150, 14563, 10792, 1537, 7586, 17914, 684, 4241, 13639, 14812, 17016, 15162, 3060, 12311, 17323, 14478, 5758, 1070, 17024, 15862, 8905, 2474, 8034, 16829, 830, 9530, 7920, 11113, 16129, 16806, 17653, 4262, 15635, 6570, 6534, 8338, 10827, 6938, 1413, 14238, 11553, 11257, 4525, 312, 6901, 4445, 11175, 9670, 12503, 12781, 7480, 14800, 3267, 17149, 958, 14700, 13936, 9228, 11973, 14526, 8513, 14492, 15061, 13767, 7278, 8947, 5762, 2562, 5312, 11414, 72, 6493, 10508, 15701, 2279, 15721, 11550, 1957, 4758, 14821, 13037, 5424, 3058, 2179, 7008, 10289, 6574, 12195, 12255, 1842, 7885, 5601, 3157, 174, 16155, 3457, 1849, 2628, 4260, 15429, 6009, 9485, 16263, 5325, 8488, 7459, 15080, 14791, 10288, 16124, 13766, 8449, 16926, 11933, 14298, 15152, 11061, 7884, 239, 2200, 15973, 12248, 16262, 460, 1509, 13507, 192, 4891, 4935, 6746, 9298, 15482, 14123, 5576, 7800, 11837, 9662, 10761, 16418, 5867, 11348, 2447, 13223, 11525, 11095, 8900, 10989, 17749, 14611, 3649, 14364, 12105, 8689, 16187, 7865, 17271, 2934, 9265, 16086, 6508, 16313, 4785, 9506, 14333, 451, 15320, 7111, 2909, 14085, 16329, 16688, 15911, 17439, 17202, 2671, 9021, 1222, 1213, 8724, 12187, 5039, 1930, 17190, 6624, 1562, 14196, 11876, 11101, 17157, 11429, 4861, 11234, 4151, 14567, 9020, 12216, 694, 7220, 109, 7215, 16769, 11689, 2879, 17566, 1967, 12316, 13723, 10982, 3519, 431, 3444, 4563, 6836, 2441, 17848, 16858, 15014, 1978, 7706, 10471, 1863, 12373, 407, 8331, 12236, 13506, 17795, 10302, 5759, 13884, 15746, 9658, 17997, 5529, 12917, 12042, 16668, 14677, 8172, 13644, 4834, 8925, 5104, 11591, 17083, 6007, 14508, 15198, 14675, 12680, 16886, 4423, 12437, 8298, 8730, 14573, 6985, 6500, 13025, 14591, 13148, 1680, 8249, 5204, 13695, 8611, 3809, 137, 14239, 333, 14101, 9834, 2730, 1090, 1371, 2663, 16172, 203, 15374, 7768, 9672, 7118, 6390, 5827, 13360, 4365, 4331, 16663, 14354, 6906, 4795, 10432, 15648, 4472, 9981, 11386, 12562, 15971, 4468, 5173, 10357, 3397, 17549, 16677, 7230, 9932, 15007, 6972, 9809, 2625, 17113, 3310, 7065, 13406, 4738, 5882, 7454, 16671, 11670, 17054, 9600, 2551, 2107, 9962, 3190, 16692, 16600, 5196, 14874, 17955, 5358, 2438, 8061, 2566, 8748, 119, 16114, 9634, 13750, 14336, 16215, 11557, 16446, 922, 12551, 14797, 5965, 5455, 7511, 17633, 10519, 10988, 5533, 490, 2615, 17070, 14263, 5846, 951, 15427, 983, 1821, 4411, 11829, 254, 8837, 9696, 13787, 12655, 14424, 14368, 8309, 17569, 14250, 5621, 13202, 7755, 13790, 15342, 17462, 3859, 10643, 16490, 16235, 10176, 6729, 12753, 10438, 10560, 16171, 7481, 14932, 11194, 4200, 9961, 7813, 3133, 8142, 6335, 14147, 13392, 10610, 115, 7103, 2384, 15262, 8857, 8698, 15870, 7699, 7843, 6549, 13074, 5996, 12585, 2492, 8215, 680, 8444, 2571, 2539, 5481, 13517, 13693, 13166, 6414, 15719, 17860, 5959, 14656, 17061, 3964, 10568, 13889, 1387, 16838, 9622, 6548, 4949, 3748, 17454, 10611, 12622, 1567, 4454, 3981, 12932, 2767, 320, 2871, 8619, 14651, 15335, 7247, 9852, 17898, 11786, 8602, 14924, 10627, 14312, 4742, 10925, 8588, 4714, 3260, 15024, 17518, 4183, 13711, 11741, 2275, 147, 5611, 65, 3930, 3185, 14808, 8266, 14133, 2642, 16154, 188, 16327, 1370, 10807, 10348, 10071, 11060, 17835, 6196, 7645, 1897, 14707, 11733, 5369, 7409, 530, 103, 13014, 10244, 6851, 7816, 596, 10481, 13248, 2817, 12092, 16115, 15545, 17270, 5084, 11939, 13377, 6809, 5871, 1400, 2431, 2692, 5893, 5581, 3124, 13544, 2197, 651, 4859, 9306, 15420, 1458, 8858, 14693, 4805, 8754, 4452, 8425, 17949, 94, 15231, 3516, 17723, 13862, 9360, 11362, 15520, 8470, 12213, 5477, 9739, 7144, 97, 3807, 14789, 1734, 2429, 13519, 9124, 10731, 12662, 7310, 9930, 12323, 13640, 15486, 16823, 11239, 8696, 8781, 8827, 11223, 10551, 15348, 13838, 12351, 11326, 5021, 13421, 11378, 2537, 199, 7089, 14612, 5479, 17148, 17470, 4303, 11404, 722, 12292, 11062, 3867, 2084, 11699, 6302, 3333, 7012, 14203, 8983, 3819, 16855, 14477, 13127, 17849, 13328, 9631, 6846, 17250, 1606, 8908, 1162, 17554, 3126, 5013, 14035, 953, 2405, 10335, 15043, 6384, 17080, 16928, 12991, 12262, 6981, 3468, 17156, 9414, 2079, 1560, 9657, 15798, 6254, 16658, 3143, 17324, 10243, 10499, 4837, 11235, 12998, 13535, 11315, 6119, 8741, 17291, 12230, 526, 725, 17074, 4030, 242, 6891, 9991, 6358, 17655, 327, 14228, 5951, 5147, 13997, 9805, 4181, 12184, 10300, 4871, 12159, 788, 15254, 14071, 15998, 15450, 15435, 15122, 8903, 14118, 2843, 1189, 5769, 2231, 3881, 12953, 13492, 11822, 8293, 7271, 16735, 9064, 12648, 17864, 3103, 2459, 10326, 11501, 11001, 1403, 6771, 11789, 2899, 16148, 6926, 4137, 6463, 3374, 1852, 10507, 5503, 6360, 7993, 9070, 7587, 2890, 7117, 14824, 949, 17831, 7846, 4357, 3286, 13409, 4512, 3864, 4164, 10454, 504, 5638, 5843, 6957, 8279, 17311, 14294, 3548, 12619, 1991, 9688, 6488, 8199, 13333, 6404, 13636, 15306, 6012, 7864, 6523, 12909, 6542, 17325, 3480, 16537, 6217, 10256, 6343, 3490, 13956, 17921, 4757, 803, 6913, 3018, 11940, 5410, 874, 11583, 5515, 12128, 17336, 10995, 6458, 9874, 14237, 1644, 14895, 15877, 9238, 10980, 11263, 12899, 464, 6292, 4185, 4168, 2174, 16272, 14016, 17599, 2114, 5345, 5437, 12992, 6596, 12947, 1489, 4166, 17371, 15797, 4967, 8230, 7889, 11831, 2682, 17364, 1543, 4476, 3951, 14001, 10216, 859, 855, 8993, 3966, 2748, 3647, 13472, 9659, 15792, 14411, 1517, 7852, 4006, 16604, 9348, 14270, 7018, 5298, 3985, 4319, 13739, 12179, 5114, 9803, 4195, 1191, 16386, 12821, 1881, 14899, 13115, 6017, 7731, 2882, 9011, 17154, 630, 7135, 13968, 9248, 15079, 10795, 11436, 16994, 6407, 6932, 1404, 4737, 13303, 5129, 13685, 13158, 4722, 8475, 9324, 13352, 8678, 14375, 13526, 1997, 10468, 3207, 133, 5459, 11293, 11220, 9139, 12994, 13504, 9441, 2080, 7561, 11211, 12769, 15590, 1449, 1840, 12869, 17796, 15149, 4479, 5254, 16517, 7088, 4393, 15042, 2277, 10608, 6029, 6540, 385, 14692, 17089, 16958, 16717, 12271, 1219, 1980, 16675, 798, 8789, 14174, 9772, 10592, 214, 16363, 8986, 5396, 7116, 2083, 175, 11666, 12356, 9800, 8186, 4280, 12647, 4881, 16139, 6654, 8923, 11645, 10819, 13523, 6112, 10147, 7647, 1204, 10166, 12436, 9438, 6249, 5441, 353, 5213, 10705, 6344, 4527, 1359, 12508, 3204, 5326, 16709, 17869, 16457, 11855, 14785, 11965, 1791, 7717, 216, 4940, 1465, 7534, 8548, 8729, 12485, 7557, 10433, 15314, 16720, 16754, 1963, 9898, 3918, 16469, 10642, 5587, 16736, 16479, 12130, 13212, 8437, 14483, 17343, 14856, 10444, 8234, 7859, 4327, 9175, 6955, 10435, 7166, 1391, 8964, 14632, 7863, 16258, 10748, 6443, 12473, 3731, 9694, 4490, 16716, 6978, 2262, 1475, 6674, 12887, 12613, 3071, 15497, 16738, 5982, 2113, 3540, 17560, 9297, 11471, 1986, 7143, 10504, 16213, 15759, 15247, 3580, 10072, 15232, 16037, 13178, 15773, 16546, 336, 1064, 7224, 9161, 1258, 11068, 514, 4836, 16441, 5141, 15440, 2947, 8557, 3024, 2048, 16521, 2195, 8882, 1469, 17956, 17055, 9608, 3280, 10799, 17970, 2027, 9535, 10329, 5291, 14181, 4500, 9735, 1226, 14540, 14098, 12459, 125, 11274, 4193, 1524, 11955, 166, 6650, 17707, 8384, 5811, 5748, 10826, 3931, 15846, 15146, 4791, 4586, 9133, 3962, 6444, 3789, 4440, 16944, 10023, 11765, 3173, 15936, 16271, 2054, 1369, 3423, 790, 4684, 4045, 1533, 347, 1758, 10783, 9974, 5839, 13459, 15471, 12829, 3944, 4964, 8367, 17398, 16175, 7952, 4420, 1446, 10340, 10794, 15377, 17527, 16001, 4372, 5106, 10558, 3371, 262, 9235, 16354, 4144, 10040, 12266, 14956, 14653, 1246, 14113, 14603, 13922, 4916, 15634, 5255, 9513, 5659, 2614, 13890, 16257, 14566, 15744, 2373, 7238, 15356, 11038, 4582, 4535, 100, 9279, 6856, 2837, 14138, 10893, 17771, 17657, 5484, 14523, 1830, 2593, 10463, 12193, 1732, 10645, 6383, 1867, 5975, 11701, 1504, 2649, 210, 1599, 6600, 1570, 14380, 13036, 11772, 15683, 14439, 14233, 2870, 1373, 12608, 17485, 5527, 13979, 14598, 15531, 12403, 14216, 5904, 9716, 15432, 537, 2503, 1254, 16552, 4022, 8682, 14752, 2085, 11932, 486, 11972, 3606, 7081, 16984, 15039, 10778, 7677, 9945, 12783, 2300, 7293, 7014, 690, 11982, 19, 17772, 10374, 9322, 11321, 2376, 7252, 4761, 12264, 13671, 6411, 17767, 4797, 4996, 9545, 10308, 14922, 5389, 11800, 612, 11686, 14009, 2049, 16090, 14715, 1608, 8448, 13453, 3842, 12569, 2701, 7485, 11627, 9087, 5592, 12862, 7643, 10652, 5089, 2938, 9240, 11537, 165, 16375, 13470, 13692, 9040, 2655, 1383, 8194, 4317, 12496, 2627, 11303, 13835, 9629, 3482, 8702, 16472, 7102, 14002, 9763, 10379, 481, 2600, 6061, 15509, 2126, 3208, 11114, 5045, 17143, 2147, 4397, 15727, 14285, 8951, 15249, 16308, 8867, 13870, 7943, 2788, 829, 13134, 11909, 15745, 14061, 17459, 3905, 12226, 11921, 2925, 7191, 17159, 10441, 3841, 6826, 410, 15957, 244, 7990, 10736, 16390, 3175, 6873, 10112, 17449, 6113, 15084, 13788, 5054, 961, 8684, 11886, 7072, 9987, 4994, 17035, 1740, 12665, 2320, 7730, 15041, 1962, 3281, 3368, 11339, 2778, 12178, 5418, 14017, 3924, 8742, 10976, 10521, 9779, 15980, 17049, 12487, 7037, 11353, 11233, 5101, 15139, 7029, 11135, 283, 1905, 13520, 17821, 6897, 15740, 9163, 406, 13994, 16269, 3474, 14341, 9291, 17584, 4353, 10602, 13980, 13916, 6236, 15163, 17253, 12987, 5227, 982, 6036, 8278, 659, 6120, 533, 12990, 294, 10896, 10865, 11936, 7063, 4979, 16616, 4217, 7005, 7625, 9864, 13909, 11309, 9399, 6812, 11319, 1549, 1029, 12902, 13917, 14504, 14362, 1282, 3588, 14588, 13831, 6361, 11616, 10938, 9055, 14635, 12958, 16178, 8247, 2036, 1397, 8757, 14503, 8373, 16054, 17718, 11530, 1568, 10050, 9225, 15760, 8970, 11960, 13327, 2258, 6201, 13990, 170, 1540, 9427, 13891, 11017, 12721, 10165, 11856, 5858, 2602, 6886, 13291, 10753, 11607, 10253, 8242, 629, 15924, 2000, 5816, 12335, 12364, 13215, 8205, 8214, 17836, 16018, 13204, 14159, 10316, 15953, 8569, 2923, 13002, 3566, 1679, 2921, 16667, 16676, 7807, 4279, 10803, 461, 14699, 17626, 9851, 4281, 2712, 9514, 2760, 16466, 17806, 587, 2904, 427, 1441, 8414, 6834, 10097, 1973, 15884, 2842, 9593, 10654, 11474, 1499, 12617, 7101, 8853, 12984, 15275, 3435, 12202, 16283, 3866, 4034, 7735, 10019, 5869, 17467, 7140, 4818, 9305, 12538, 8635, 3643, 7439, 3242, 15932, 11369, 17238, 4152, 14092, 12229, 17625, 15134, 10299, 4728, 17466, 13920, 9888, 4107, 3626, 11445, 10198, 16940, 3637, 10135, 4295, 4659, 12394, 5429, 3503, 6634, 17153, 13703, 6509, 13254, 67, 8632, 1569, 14328, 13488, 17119, 16724, 13155, 6368, 17499, 12885, 10252, 17493, 10912, 1948, 13047, 15150, 1595, 9801, 2471, 10502, 1456, 1908, 15908, 5508, 10418, 17681, 2861, 7904, 5370, 11296, 9712, 15375, 6247, 3245, 9665, 13044, 8198, 5109, 4763, 17669, 12866, 2070, 7890, 1071, 1751, 11209, 8597, 4341, 14600, 4942, 3292, 4540, 6535, 7936, 3210, 2347, 2893, 10625, 17889, 252, 10916, 5544, 4451, 6995, 13556, 16946, 6563, 6433, 6470, 7789, 3805, 8461, 2040, 15196, 1152, 6619, 16274, 14485, 1299, 11676, 7372, 15561, 4399, 12350, 3357, 8471, 8267, 3665, 11882, 10707, 5641, 4618, 512, 717, 14593, 11431, 742, 8457, 14254, 17200, 11183, 17223, 3181, 4165, 12542, 7404, 13873, 8163, 14116, 2256, 9142, 1069, 2363, 15717, 658, 13814, 6693, 4299, 3365, 95, 5309, 13531], 0)


#slicing data into predictive part and prediction part
X_train = train_data[:, :-1]
Y_train = train_data[:, -1]
X_test = test_data[:, :-1]
Y_test = test_data[:, -1]

print(X_train.shape, Y_train.shape, X_test.shape, Y_test.shape)

#We used here a little bit different scheme, so input(with 3 columns)
#doesn't have to have the same shape as output(one column with groups)
# create model
model = Sequential()
model.add(Dense(12, input_dim=3, activation='relu'))
model.add(Dense(8, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

# Compile model
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

# Fit the model
model.fit(X_train, Y_train, epochs=25, batch_size=10)

# evaluate the model
scores = model.evaluate(X_test, Y_test)

model.summary()
